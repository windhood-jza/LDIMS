version: "3.8"

services:
  frontend:
    build:
      context: ./frontend # 前端代码目录
      dockerfile: Dockerfile # 前端Dockerfile
      args:
        - VITE_API_BASE_URL_BUILD=${VITE_API_BASE_URL}
    container_name: ${CONTAINER_PREFIX:-ldims}_frontend
    networks:
      - ldims_network
    restart: unless-stopped
    # 前端服务通常监听在容器内的80端口

  backend:
    build:
      context: ./backend # 后端代码目录
      dockerfile: Dockerfile # 后端Dockerfile
    container_name: ${CONTAINER_PREFIX:-ldims}_backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      TZ: ${TZ:-Asia/Shanghai}
      PORT: ${PORT:-3000}
      DB_DIALECT: ${DB_DIALECT:-mysql}
      DB_HOST: db
      DB_PORT: ${DB_PORT:-3306}
      DB_NAME: ${DB_NAME:-LDIMS_DB}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      PYTHON_EXECUTABLE_PATH: ${PYTHON_EXECUTABLE_PATH:-python3}
    volumes:
      - ${UPLOADS_PATH:-./uploads}:/app/uploads
      - ${EXPORTS_PATH:-./exports}:/app/exports
      - ${DOCUMENTS_PATH:-./documents}:/app/document_files
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ldims_network
    restart: unless-stopped

  worker:
    build:
      context: ./backend # Worker与后端共享代码库和Dockerfile
      dockerfile: Dockerfile
    container_name: ${CONTAINER_PREFIX:-ldims}_worker
    command: npm run start:worker
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      TZ: ${TZ:-Asia/Shanghai}
      DB_DIALECT: ${DB_DIALECT:-mysql}
      DB_HOST: db
      DB_PORT: ${DB_PORT:-3306}
      DB_NAME: ${DB_NAME:-LDIMS_DB}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      PYTHON_EXECUTABLE_PATH: ${PYTHON_EXECUTABLE_PATH:-python3}
    volumes:
      - ${UPLOADS_PATH:-./uploads}:/app/uploads
      - ${EXPORTS_PATH:-./exports}:/app/exports
      - ${DOCUMENTS_PATH:-./documents}:/app/document_files
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ldims_network
    restart: unless-stopped

  db:
    image: mysql:8.0
    container_name: ${CONTAINER_PREFIX:-ldims}_db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ${DB_PATH:-./docker/mysql}:/var/lib/mysql
      - ./db_sql:/docker-entrypoint-initdb.d:ro
    networks:
      - ldims_network
    ports:
      - "${DB_HOST_PORT:-3306}:3306"
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u${DB_USER}",
          "-p${DB_PASSWORD}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    container_name: ${CONTAINER_PREFIX:-ldims}_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - ${REDIS_PATH:-./docker/redis}:/data
    networks:
      - ldims_network
    ports:
      - "${REDIS_HOST_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: ${CONTAINER_PREFIX:-ldims}_nginx
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/templates/default.conf.template
      - ./ssl_certs:/etc/nginx/ssl:ro
    environment:
      NGINX_SERVER_NAME: ${DOMAIN_NAME:-localhost}
      NGINX_PORT: 80
      NGINX_SSL_PORT: 443
      NGINX_SSL_CERT: ${NGINX_SSL_CERT:-fullchain.pem}
      NGINX_SSL_KEY: ${NGINX_SSL_KEY:-privkey.pem}
      NGINX_CLIENT_MAX_BODY_SIZE: ${NGINX_CLIENT_MAX_BODY_SIZE:-15M}
      BACKEND_HOST: backend
      BACKEND_PORT: ${BACKEND_PORT_CONTAINER:-3000}
      FRONTEND_HOST: frontend
      FRONTEND_PORT: 80
      HTTPS_ENABLED: ${HTTPS_ENABLED:-false}
    ports:
      - "${HOST_HTTP_PORT:-80}:80"
      - "${HOST_HTTPS_PORT:-443}:443"
    depends_on:
      - frontend
      - backend
    command: /bin/sh -c "envsubst '$${NGINX_SERVER_NAME} $${NGINX_PORT} $${NGINX_SSL_PORT} $${NGINX_SSL_CERT} $${NGINX_SSL_KEY} $${NGINX_CLIENT_MAX_BODY_SIZE} $${BACKEND_HOST} $${BACKEND_PORT} $${FRONTEND_HOST} $${FRONTEND_PORT} $${HTTPS_ENABLED}' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    networks:
      - ldims_network
    restart: unless-stopped

networks:
  ldims_network:
    name: ${NETWORK_NAME:-ldims_network}
    driver: bridge
