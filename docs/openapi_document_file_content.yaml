openapi: 3.0.3
info:
  title: LDIMS 文档文件内容提取 API
  description: |
    LDIMS系统中文档文件内容提取API，允许客户端获取已上传文档文件的元数据和提取的文本内容。

    ## 功能特性
    - 🔐 JWT认证保护
    - 📄 支持多种文档格式的内容提取
    - 🚀 高性能响应 (P95 < 500ms)
    - 🛡️ 完整的错误处理机制
    - 📊 详细的操作审计日志

  version: 1.0.0
  contact:
    name: LDIMS 开发团队
    email: dev@ldims.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5000/api/documents
    description: 本地开发环境
  - url: https://api.ldims.com/api/documents
    description: 生产环境

paths:
  /files/{file_id}/content:
    get:
      tags:
        - DocumentFiles
      summary: 获取文档文件提取内容
      description: |
        根据文件ID获取文档文件的元数据和提取的文本内容。

        ## 支持的文件格式
        - PDF (.pdf)
        - Microsoft Word (.doc, .docx)
        - 文本文件 (.txt)
        - RTF (.rtf)

        ## 权限要求
        - 用户必须具有有效的JWT token
        - 用户必须有权访问指定的文件

      operationId: getDocumentFileContent
      parameters:
        - name: file_id
          in: path
          required: true
          description: 文档文件的唯一标识符
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 123
        - name: includeMetadata
          in: query
          required: false
          description: 是否包含文件元数据信息
          schema:
            type: boolean
            default: true
            example: true
        - name: format
          in: query
          required: false
          description: 响应格式类型
          schema:
            type: string
            enum: [json, text]
            default: json
            example: json
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 成功获取文件内容
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              examples:
                completedFile:
                  summary: 处理完成的文件
                  value:
                    success: true
                    code: 200
                    message: "获取文件内容成功"
                    data:
                      fileId: 123
                      fileName: "技术方案.pdf"
                      filePath: "documents/2024/01/tech-proposal.pdf"
                      extractedContent: "这是一份技术方案文档...\n\n## 项目背景\n\n本项目旨在..."
                      processingStatus: "completed"
                      extractedAt: null
                      fileSize: 2048576
                      mimeType: "application/pdf"
                      documentId: 45
                      uploadedAt: "2024-01-15T08:30:00.000Z"
                processingFile:
                  summary: 正在处理的文件
                  value:
                    success: true
                    code: 200
                    message: "获取文件内容成功"
                    data:
                      fileId: 124
                      fileName: "合同文档.docx"
                      filePath: "documents/2024/01/contract.docx"
                      extractedContent: null
                      processingStatus: "processing"
                      extractedAt: null
                      fileSize: 1536000
                      mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                      documentId: 46
                      uploadedAt: "2024-01-15T09:15:00.000Z"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalidFileId:
                  summary: 无效的文件ID
                  value:
                    success: false
                    code: 400
                    message: "参数验证失败"
                    data:
                      - msg: "无效的文件ID"
                        param: "file_id"
                        location: "params"
        "401":
          description: 未认证 - 缺少或无效的认证令牌
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                missingToken:
                  summary: 缺少认证令牌
                  value:
                    success: false
                    code: 401
                    message: "未提供有效的认证令牌"
                invalidToken:
                  summary: 无效的认证令牌
                  value:
                    success: false
                    code: 401
                    message: "认证令牌无效或已过期"
        "403":
          description: 禁止访问 - 无权访问指定文件
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                accessDenied:
                  summary: 无权访问文件
                  value:
                    success: false
                    code: 403
                    message: "无权访问该文件"
        "404":
          description: 文件不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                fileNotFound:
                  summary: 文件不存在
                  value:
                    success: false
                    code: 404
                    message: "文件不存在或已被删除"
        "429":
          description: 请求过于频繁
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                rateLimited:
                  summary: 超出请求限制
                  value:
                    success: false
                    code: 429
                    message: "请求过于频繁，请稍后重试"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                internalError:
                  summary: 服务器内部错误
                  value:
                    success: false
                    code: 500
                    message: "服务器内部错误，请稍后重试"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT认证令牌。格式：Bearer <token>

        ## 获取Token
        通过用户登录接口获取JWT token

        ## Token格式
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        ```

  schemas:
    SuccessResponse:
      type: object
      required:
        - success
        - code
        - message
        - data
      properties:
        success:
          type: boolean
          example: true
          description: 请求是否成功
        code:
          type: integer
          example: 200
          description: HTTP状态码
        message:
          type: string
          example: "获取文件内容成功"
          description: 响应消息
        data:
          $ref: "#/components/schemas/DocumentFileContentResponse"
          description: 文件内容数据

    ErrorResponse:
      type: object
      required:
        - success
        - code
        - message
      properties:
        success:
          type: boolean
          example: false
          description: 请求是否成功
        code:
          type: integer
          example: 400
          description: HTTP状态码
        message:
          type: string
          example: "参数验证失败"
          description: 错误消息
        data:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
          description: 详细错误信息（可选）

    DocumentFileContentResponse:
      type: object
      required:
        - fileId
        - fileName
        - filePath
        - processingStatus
        - fileSize
        - mimeType
        - documentId
        - uploadedAt
      properties:
        fileId:
          type: integer
          format: int64
          example: 123
          description: 文件的唯一标识符
        fileName:
          type: string
          example: "技术方案.pdf"
          description: 原始文件名
        filePath:
          type: string
          example: "documents/2024/01/tech-proposal.pdf"
          description: 文件在服务器上的存储路径
        extractedContent:
          type: string
          nullable: true
          example: "这是一份技术方案文档...\n\n## 项目背景\n\n本项目旨在..."
          description: 从文件中提取的文本内容，如果文件尚未处理完成则为null
        processingStatus:
          type: string
          enum:
            - pending
            - processing
            - completed
            - failed
            - ocr_fallback
          example: "completed"
          description: |
            文件处理状态：
            - pending: 等待处理
            - processing: 正在处理
            - completed: 处理完成
            - failed: 处理失败
            - ocr_fallback: OCR备用处理
        extractedAt:
          type: string
          format: date-time
          nullable: true
          example: null
          description: 内容提取完成时间 (ISO 8601格式)
        fileSize:
          type: integer
          format: int64
          example: 2048576
          description: 文件大小（字节）
        mimeType:
          type: string
          example: "application/pdf"
          description: 文件MIME类型
        documentId:
          type: integer
          format: int64
          example: 45
          description: 关联的文档ID
        uploadedAt:
          type: string
          format: date-time
          example: "2024-01-15T08:30:00.000Z"
          description: 文件上传时间 (ISO 8601格式)

    ValidationError:
      type: object
      required:
        - msg
        - param
        - location
      properties:
        msg:
          type: string
          example: "无效的文件ID"
          description: 验证错误消息
        param:
          type: string
          example: "file_id"
          description: 出错的参数名
        location:
          type: string
          example: "params"
          description: 参数位置（params, query, body等）

  examples:
    CompletedFileResponse:
      summary: 处理完成的文件响应
      value:
        success: true
        code: 200
        message: "获取文件内容成功"
        data:
          fileId: 123
          fileName: "技术方案.pdf"
          filePath: "documents/2024/01/tech-proposal.pdf"
          extractedContent: "这是一份技术方案文档的详细内容..."
          processingStatus: "completed"
          extractedAt: null
          fileSize: 2048576
          mimeType: "application/pdf"
          documentId: 45
          uploadedAt: "2024-01-15T08:30:00.000Z"

    ProcessingFileResponse:
      summary: 正在处理的文件响应
      value:
        success: true
        code: 200
        message: "获取文件内容成功"
        data:
          fileId: 124
          fileName: "合同文档.docx"
          filePath: "documents/2024/01/contract.docx"
          extractedContent: null
          processingStatus: "processing"
          extractedAt: null
          fileSize: 1536000
          mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
          documentId: 46
          uploadedAt: "2024-01-15T09:15:00.000Z"

tags:
  - name: DocumentFiles
    description: |
      文档文件相关操作，包括文件内容提取、元数据获取等功能。

      ## 主要功能
      - 📄 获取文档文件的提取内容
      - 📊 查看文件处理状态
      - 🔍 获取文件元数据信息

      ## 使用注意事项
      - 所有接口都需要JWT认证
      - 请求频率限制：每分钟100次
      - 支持的最大文件大小：50MB
