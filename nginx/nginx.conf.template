user nginx;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    types {
        application/javascript mjs;
    }

    log_format  main  '${DOLLAR}remote_addr - ${DOLLAR}remote_user [${DOLLAR}time_local] "${DOLLAR}request" '
                      '${DOLLAR}status ${DOLLAR}body_bytes_sent "${DOLLAR}http_referer" '
                      '"${DOLLAR}http_user_agent" "${DOLLAR}http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log;

    sendfile        on;
    keepalive_timeout  65;

    # WebSocket支持
    map ${DOLLAR}http_upgrade ${DOLLAR}connection_upgrade {
        default upgrade;
        ''      close;
    }

    # HSTS映射
    map ${DOLLAR}scheme ${DOLLAR}hsts_header {
        https   "max-age=63072000; preload";
    }

    # 增加变量哈希表大小
    variables_hash_max_size 2048;
    variables_hash_bucket_size 128;

    server {
        listen ${NGINX_PORT};
        server_name ${NGINX_SERVER_NAME};

        # HTTPS重定向（安全写法）
        set ${DOLLAR}https_enabled "${HTTPS_ENABLED}";
        set ${DOLLAR}redirect_flag "${DOLLAR}https_enabled${DOLLAR}scheme";
        if (${DOLLAR}redirect_flag = "truehttp") {
            return 301 https://${DOLLAR}host${DOLLAR}request_uri;
        }
        
        # 如果未启用HTTPS，则直接提供HTTP内容
        location / {
            root   /usr/share/nginx/html; # 指向挂载的静态文件目录
            try_files ${DOLLAR}uri ${DOLLAR}uri/ /index.html; # 处理单页应用路由
            client_max_body_size ${NGINX_CLIENT_MAX_BODY_SIZE};
        }

        # API路由代理到后端服务
        location /api/ {
            proxy_pass http://${BACKEND_HOST}:${BACKEND_PORT};
            proxy_set_header Host ${DOLLAR}host;
            proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
            
            # WebSocket支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade ${DOLLAR}http_upgrade;
            proxy_set_header Connection ${DOLLAR}connection_upgrade;
            
            client_max_body_size ${NGINX_CLIENT_MAX_BODY_SIZE};
        }
    }

    # START_HTTPS_BLOCK
    # HTTPS服务器配置 (仅当HTTPS_ENABLED=true时有效)
    server {
        listen ${NGINX_SSL_PORT} ssl http2;
        server_name ${NGINX_SERVER_NAME};

        # SSL配置
        ssl_certificate /etc/nginx/ssl/${NGINX_SSL_CERT};
        ssl_certificate_key /etc/nginx/ssl/${NGINX_SSL_KEY};
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
        ssl_session_timeout 10m;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;

        # 安全头部
        add_header Strict-Transport-Security ${DOLLAR}hsts_header always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "same-origin" always;

        # 主页面路由到前端
        location / {
            root   /usr/share/nginx/html; # 指向挂载的静态文件目录
            try_files ${DOLLAR}uri ${DOLLAR}uri/ /index.html; # 处理单页应用路由
            client_max_body_size ${NGINX_CLIENT_MAX_BODY_SIZE};
        }

        # API路由代理到后端服务
        location /api/ {
            proxy_pass http://${BACKEND_HOST}:${BACKEND_PORT};
            proxy_set_header Host ${DOLLAR}host;
            proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
            
            # WebSocket支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade ${DOLLAR}http_upgrade;
            proxy_set_header Connection ${DOLLAR}connection_upgrade;
            
            client_max_body_size ${NGINX_CLIENT_MAX_BODY_SIZE};
        }
    }
    # END_HTTPS_BLOCK
} 